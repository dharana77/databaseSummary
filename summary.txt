인덱싱 탐색 삽입 삭제 속도
탐색을 속도가 빠르지만 삽입 삭제는 성능이 느릴 수 있다
그 이유는 인덱스는 데이터베이스의 테이블에 대한 검색 속도를 향상시켜주는 자료구조로
테이블의 특정 컬럼에 인덱스를 생성하면 해당 컬럼의 데이터를 정렬한 후 별도의 메모리 공간>에 데이터의 물리적 요소와 함께 저장된다.
즉 컬럼의 값과 물리적 주소를 (key, value) 의 한쌍으로 저장한다.

이러한 인덱스를 사용하면 당연하게도 테이블을 검색하는 속도와 성능이 향상된다.
그에 따라 시스템의 전반적인 부하를 줄일 수 있다.
인덱스에 의해 데이터들이 정렬된 형태를 갖고 기존엔 where 문으로 특정 데이를 찾기 위해 테>이블의 전를 조건과 비교해야하는 풀테이블 스캔 작업이 필요했지만 인덱스를 이용하면 데이터>들이 정렬되어 있기 때문에 조건에 맞는 데이터를 빠르게 찾을 수 있다.
또 Order by 문이나 Min/Max 같은 경우도 이미정렬이 되어 있기 때문에 빠르게 수행할 수 있다.

인덱스의 단점은 다음과 같을 수 있다.
인덱스를 관리하기 위한 추가작업이 필요
추가 저장 공간 필요
잘못 사용하는 경우 오히려 검색 성능 저하

또한 인덱스를 항상 정렬된 상탵로 유지해야 하기 때문에 인덱스가 적용된 컬럼에 삽입 삭제, >수정 작업을 수행하면 다음과 같은 추가 작업이 필요하다.
insert : 새로운 데이터에 대한 인덱스를 추가
delete : 삭제하는 데이터의 인덱스를 사용하지 않는다는 작업 수행
update: 기존의 인덱스를 사용하지 않음 처리, 갱신도니 데이터에 대한 인덱스 추가

이와같이 인덱스 수정이 추가적으로 필요하기 때문에 데이터 수정이 잦은 경우 성능이 낮아짐.
또한 데이터의 인덱스를 제거하는 것이 아니라 '사용하지 않음'으로 처리하고 남겨두기 때문에 수정 작업이 많은경우 실제 데이터에 비해 인덱스가 과도하게 커지는 문제점 발생가능
